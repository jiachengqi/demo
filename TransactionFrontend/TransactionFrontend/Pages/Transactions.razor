@using TransactionFrontend.Models
@using TransactionFrontend.Services

@page "/"
@inject ITransactionService TransactionService
@inject NotificationService NotificationService

<h3>All Transactions</h3>

@if (isLoading)
{
    <RadzenProgressBar Mode="Radzen.ProgressBarMode.Indeterminate" />
    }
else if (transactions != null)
    {
    <RadzenDataGrid Data="@transactions" TItem="TransactionDto" ColumnWidth="200px" AllowFiltering="true" AllowPaging="true" PageSize="10">
        <Columns>
            <RadzenDataGridColumn TItem="TransactionDto" Property="Id" Title="ID" />
            <RadzenDataGridColumn TItem="TransactionDto" Property="Amount" Title="Amount" />
            <RadzenDataGridColumn TItem="TransactionDto" Property="Currency" Title="Currency" />
            <RadzenDataGridColumn TItem="TransactionDto" Property="TransactionType" Title="Type" />
            <RadzenDataGridColumn TItem="TransactionDto" Property="Status" Title="Status" />
            <RadzenDataGridColumn TItem="TransactionDto" Property="Timestamp" Title="Timestamp" FormatString="{0:yyyy-MM-dd HH:mm:ss}" />
        </Columns>
    </RadzenDataGrid>
}

@code {
    private List<TransactionDto> transactions;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            transactions = await TransactionService.GetAllTransactionsAsync();
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error", $"eailed to load transactions: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }
}
